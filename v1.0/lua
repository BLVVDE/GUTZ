--[[ This file was generated using Luraph Obfuscator v14.0.3 [https://lura.ph/]
> discord.gg/gtz | discord.gg/juunes | discord - @blvvde. <
- Made by blvvde/mando & 2heyo -

 ██████╗ ██╗   ██╗████████╗███████╗
██╔════╝ ██║   ██║╚══██╔══╝╚══███╔╝
██║  ███╗██║   ██║   ██║     ███╔╝ 
██║   ██║██║   ██║   ██║    ███╔╝  
╚██████╔╝╚██████╔╝   ██║   ███████╗
 ╚═════╝  ╚═════╝    ╚═╝   ╚══════╝                                  
]]














































































































repeat
    wait()
until game:IsLoaded()
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local InputService = game:GetService("UserInputService")
local TeleportService = game:GetService("TeleportService")
local MarketplaceService = game:GetService("MarketplaceService")
getgenv().Alluka = {
    Target = nil,
    LookAt = {Enabled = false},
    Headless = {Enabled = false},
    Korblox = {Enabled = false},
    Notification = {Enabled = true},
    Aimlock = {Enabled = false, Target = nil, Prediction = false, Pred = 0.147, Part = "UpperTorso", AirShot = false, AirPart = "LowerTorso", KnockedCheck = false, GrabbedCheck = false, Key = "", Resolver = false, AutoPrediction = false},
    Camlock = {Enabled = false, Target = nil, Prediction = false, Pred = 0.147, Part = "Head", AirShot = false, AirPart = "LowerTorso", KnockedCheck = false, GrabbedCheck = false, Key = "", Resolver = false, AutoPrediction = false, Smoothness = false, SmoothnessAmount = 0.2, EasingStyle = "Sine", EasingDirection = "Out"},
    SilentAim = {Enabled = false, Prediction = false, Pred = 0.147, Part = "UpperTorso", KnockedCheck = false, GrabbedCheck = false},
    AntiAim = {Enabled = false, Key = "", XValue = 0, YValue = 0, ZValue = 0, Type = "Sky"},
    Visuals = {Enabled = false, Hitbox = false, Text = false, Name = false, Health = false, Distance = false, Wanted = false, Cham = false, Items = false},
    Desync = {Enabled = false, Key = ""},
    NoClip = {Enabled = false, Key = ""},
    SpinBot = {Enabled = false, Speed = 4},
    Fly = {Enabled = false, Speed = 4, Key = "V"},
    Strafe = {Enabled = false, Distance = 8, Speed = 2.8, Angle = 0, Type = "Orbit", View = false},
    Speed = {Enabled = false, Speed = 2.5, Key = "", SprintKey = "LeftShift"},
    AutoArmor = {Enabled = false, TP = false, Delay = 0, BuyHP = 45, ArmorToBuy = "[High-Medium Armor] - $2440"},
    AutoHeal = {Enabled = false, TP = false, Delay = 0, BuyHP = 25, FoodToBuy = "[Popcorn] - $7"},
    Teleports = {
        Bank = CFrame.new(-470.373474, 39.0684624, -284.831848, -0.0511315688, 3.44844828e-08, -0.998691916, -8.0414118e-08, 1, 3.86467356e-08, 0.998691916, 8.22850055e-08, -0.0511315688), 
        Casino = CFrame.new(-867.366455, 43.7999496, -155.645859, 0.999982715, 7.22820914e-08, 0.00588375516, -7.25752187e-08, 1, 4.96055641e-08, -0.00588375516, -5.00317192e-08, 0.999982715), 
        StripClub = CFrame.new(-263.665283, 0.0313377157, -328.721832, 0.999999762, 9.82708244e-08, 0.000672494818, -9.82943433e-08, 1, 3.49390987e-08, -0.000672494818, -3.50051934e-08, 0.999999762), 
        School = CFrame.new(-604.562012, 47.7499886, 244.782974, 0.999673009, -6.03166086e-08, -0.0255717915, 6.24988203e-08, 1, 8.45373478e-08, 0.0255717915, -8.61079101e-08, 0.999673009), 
        UFO = CFrame.new(70.958992, 156.574448, -689.503174, -0.999162197, -3.74492792e-08, 0.0409258381, -3.533561e-08, 1, 5.23697317e-08, -0.0409258381, 5.08797129e-08, -0.999162197), 
        UpHill = CFrame.new(481.964111, 62.5341187, -620.900757, -0.9999066, 1.87809519e-08, -0.0136653278, 1.84973032e-08, 1, 2.08831938e-08, 0.0136653278, 2.06284732e-08, -0.9999066), 
        DownHill = CFrame.new(-577.774292, 22.8150673, -736.13916, -7.75719527e-05, 3.84763332e-08, -1, -1.17687171e-09, 1, 3.8476422e-08, 1, 1.17985643e-09, -7.75719527e-05),
        ShoppingPlaza = CFrame.new(-991.641235, 42.3799934, -673.324585, -0.0390856378, 2.64607305e-08, -0.999235868, 3.92789197e-08, 1, 2.49445513e-08, 0.999235868, -3.82739316e-08, -0.0390856378)
    },
}
local Library = loadstring(game:GetObjects("rbxassetid://7657867786")[1].Source)()
local NotifyLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kinlei/Dynissimo/main/Scripts/AkaliNotif.lua"))()
local Wait = Library.subs.Wait -- Only returns if the GUI has not been terminated. For 'while Wait() do' loops
local Gutz = Library:CreateWindow(
    {
        Name = "GUTZ | ["..MarketplaceService:GetProductInfo(game.PlaceId).Name.."]", 
        Themeable = {
            Info = {
                "Discord Server: d.gg/GTZ", 
                "Discord Server: d.gg/Juunes"
            }, 
            Credit = false,
            Background = {
                Asset = "rbxassetid://15201607668",
                Visible = 100,
            }
        }
    }
)

local function GetClosestPlayer()
    local closestPlayer = nil
    local shortestDistance = math.huge
    for _, v in pairs(Players:GetPlayers()) do
        if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health ~= 0 and v.Character:FindFirstChild("HumanoidRootPart") then
            local pos = workspace.CurrentCamera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
            local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(LocalPlayer:GetMouse().X, LocalPlayer:GetMouse().Y + 36)).Magnitude
            if magnitude < shortestDistance then
                closestPlayer = v
                shortestDistance = magnitude
            end
        end
    end
    return closestPlayer
end
local function Notify(title, text, time)
    if Alluka.Notification.Enabled then
        NotifyLibrary.Notify({
            Title = title;
            Description = text;
            Duration = time;
        })
    else
        print(title, text)
    end
end

local function Fly()
    Alluka.Fly.Enabled = not Alluka.Fly.Enabled
    Notify("GUTZ | Fly", "Flying : " .. tostring(Alluka.Fly.Enabled), 3)
    local BodyPosition = Instance.new("BodyPosition", game.Players.LocalPlayer.Character:FindFirstChild("Head"))
    local BodyGyro = Instance.new("BodyGyro", game.Players.LocalPlayer.Character:FindFirstChild("Head"))
    BodyPosition.maxForce = Vector3.new(math.huge, math.huge, math.huge)
    BodyPosition.position = game.Players.LocalPlayer.Character:FindFirstChild("Head").Position
    BodyGyro.maxTorque = Vector3.new(9e9, 9e9, 9e9)
    BodyGyro.CFrame = game.Players.LocalPlayer.Character:FindFirstChild("Head").CFrame
    repeat
        wait()
        game.Players.LocalPlayer.Character.Humanoid.PlatformStand = true
        local New = BodyGyro.CFrame - BodyGyro.CFrame.p + BodyPosition.position
        if game:GetService("UserInputService"):IsKeyDown("W") then
            New = New + workspace.CurrentCamera.CoordinateFrame.lookVector * Alluka.Fly.Speed
            BodyGyro.CFrame = workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad(Alluka.Fly.Speed * 0), 0, 0)
        end
        if game:GetService("UserInputService"):IsKeyDown("S") then
            New = New - workspace.CurrentCamera.CoordinateFrame.lookVector * Alluka.Fly.Speed
            BodyGyro.CFrame = workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(math.rad(Alluka.Fly.Speed * 0), 0, 0)
        end
        if game:GetService("UserInputService"):IsKeyDown("D") then
            New = New * CFrame.new(Alluka.Fly.Speed, 0, 0)
            BodyGyro.CFrame = workspace.CurrentCamera.CoordinateFrame
        end
        if game:GetService("UserInputService"):IsKeyDown("A") then
            New = New * CFrame.new(-Alluka.Fly.Speed, 0, 0)
            BodyGyro.CFrame = workspace.CurrentCamera.CoordinateFrame
        end
        BodyPosition.Position = New.p
    until not Alluka.Fly.Enabled
    Alluka.Fly.Enabled = false
    BodyGyro:Destroy()
    BodyPosition:Destroy()
    game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
end

RunService.RenderStepped:Connect(function()

    if Alluka.Camlock.Enabled and Alluka.Target then
        if Alluka.Camlock.AirShot and Alluka.Target.Character:WaitForChild("Humanoid"):GetState() == Enum.HumanoidStateType.Freefall then
            targetPart = Alluka.Camlock.AirPart
        else
            targetPart = Alluka.Camlock.Part
        end

        local targetPosition;
        if Alluka.Camlock.Resolver then
            targetPosition = Alluka.Target.Character[targetPart].Position
        elseif Alluka.Camlock.Prediction then
            local velocity = Alluka.Target.Character[targetPart].Velocity
            if velocity then
                targetPosition = Alluka.Target.Character[targetPart].Position + (velocity * Alluka.Camlock.Pred)
            else
                targetPosition = Alluka.Target.Character[targetPart].Position
            end
        else
            targetPosition = Alluka.Target.Character[targetPart].Position
        end

        if Alluka.Camlock.Smoothness then
            TweenService:Create(
                workspace.CurrentCamera, 
                TweenInfo.new(
                    Alluka.Camlock.SmoothnessAmount, 
                    Enum.EasingStyle[Alluka.Camlock.EasingStyle], 
                    Enum.EasingDirection[Alluka.Camlock.EasingDirection]
                ), 
                {CFrame = CFrame.new(workspace.CurrentCamera.CFrame.Position, targetPosition)}
            ):Play()
        else
            workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.Position, targetPosition)
        end
    end

    if Alluka.Strafe.Enabled then
        if Alluka.Target and Alluka.Target.Character and Alluka.Target.Character:FindFirstChild("HumanoidRootPart") then
            Alluka.Strafe.Angle = Alluka.Strafe.Angle + Alluka.Strafe.Speed
            
            if Alluka.Strafe.View then
                game.Workspace.CurrentCamera.CameraSubject = Alluka.Target.Character:FindFirstChild("Humanoid")
            else
                game.Workspace.CurrentCamera.CameraSubject = LocalPlayer.Character:FindFirstChild("Humanoid")
            end
            if Alluka.Strafe.Type == "Orbit" then 
                LocalPlayer.Character.HumanoidRootPart.CFrame = Alluka.Target.Character:WaitForChild("HumanoidRootPart").CFrame * CFrame.Angles(0, Alluka.Strafe.Angle, 0) * CFrame.new(0, 0, Alluka.Strafe.Distance)
            end
        else
            game.Workspace.CurrentCamera.CameraSubject = LocalPlayer.Character:FindFirstChild("Humanoid")
        end
        RunService.RenderStepped:Wait()
    else
        game.Workspace.CurrentCamera.CameraSubject = LocalPlayer.Character:FindFirstChild("Humanoid")
    end

end)

RunService.Heartbeat:Connect(function()

    if Alluka.AntiAim.Enabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local OldVelocity = LocalPlayer.Character.HumanoidRootPart.Velocity
        if Alluka.AntiAim.Type == "Sky" then
            LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0, 9999, 0)
        elseif Alluka.AntiAim.Type == "Underground" then
            LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0, -9999, 0)
        elseif Alluka.AntiAim.Type == "Custom Vel"  then
            LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(Alluka.AntiAim.XValue, Alluka.AntiAim.YValue, Alluka.AntiAim.ZValue)
        end
        RunService.RenderStepped:Wait()
        LocalPlayer.Character.HumanoidRootPart.Velocity = OldVelocity
    end

end)

local Old; Old = hookmetamethod(game, "__namecall", function(self, ...)
    local args = { ... }
    local method = getnamecallmethod()

    if method == "FireServer" then
        if args[1] == "UpdateMousePos" or args[1] == "MousePos" or args[1] == "Mouse" then
            if Alluka.Aimlock.Enabled and Alluka.Target then
                if Alluka.Aimlock.Resolver then
                    args[2] = Alluka.Target.Character[Alluka.Aimlock.Part].Position
                    return Old(self, unpack(args))
                elseif Alluka.Aimlock.Prediction then
                    args[2] = Alluka.Target.Character[Alluka.Aimlock.Part].Position + (Alluka.Target.Character[Alluka.Aimlock.Part].Velocity * Alluka.Aimlock.Pred)
                    return Old(self, unpack(args))
                elseif Alluka.Aimlock.AirShot and Alluka.Target.Character:FindFirstChild("Humanoid") and Alluka.Target.Character.Humanoid.FloorMaterial == Enum.Material.Air then
                    args[2] = Alluka.Target.Character[Alluka.Aimlock.AirPart].Position + (Alluka.Target.Character[Alluka.Aimlock.AirPart].Velocity * Alluka.Aimlock.Pred)
                    return Old(self, unpack(args))
                else
                    args[2] = Alluka.Target.Character[Alluka.Aimlock.Part].Position
                    return Old(self, unpack(args))
                end
            end
        end
    end

    return Old(self, ...)
end)




local AimTab = Gutz:CreateTab({Name = "Aiming"})
local AimingSection = AimTab:CreateSection({Name = "Target Aimlock", Side = "Left"})
AimingSection:AddKeybind(
    {
        Name = "Target Key",
        Keybind = "Q",
        Pressed = function()
            if Alluka.Target then
                Alluka.Target = nil
                Notify("GUTZ | Target", "Targets cleared", 3)
            else
                Alluka.Target = GetClosestPlayer()
                if Alluka.Target then
                    Notify("GUTZ | Target", "Target acquired: " ..tostring(Alluka.Target), 3)
                else
                    Notify("GUTZ | Target", "No valid targets found", 3)
                end
            end
        end
    }
)
AimingSection:AddToggle(
    {
        Name = "Aimlock",
        Value = Alluka.Aimlock.Enabled,
        Keybind = Alluka.Aimlock.Key,
        Callback = function(v)
            Alluka.Aimlock.Enabled = v
            Notify("GUTZ | Aimlock", "Aimlock : "..tostring(Alluka.Aimlock.Enabled), 3)
        end
    }
)
AimingSection:AddToggle(
    {
        Name = "Air Shot",
        Value = Alluka.Aimlock.AirShot,
        Callback = function(v)
            Alluka.Aimlock.AirShot = v
            Notify("GUTZ | Aimlock", "Air Shot : "..tostring(Alluka.Aimlock.AirShot), 3)
        end
    }
)
AimingSection:AddDropdown(
    {
        Name = "Aim Part",
        Value = Alluka.Aimlock.Part,
        List = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso"},
        Callback = function(v)
            Alluka.Aimlock.Part = v
            Notify("GUTZ | Aimlock", "Part : "..tostring(Alluka.Aimlock.Part), 3)
        end
    }
)
AimingSection:AddDropdown(
    {
        Name = "Air Part",
        Value = Alluka.Aimlock.AirPart,
        List = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso"},
        Callback = function(v)
            Alluka.Aimlock.AirPart = v
            Notify("GUTZ | Aimlock", "Air Part : "..tostring(Alluka.Aimlock.AirPart), 3)
        end
    }
)
AimingSection:AddToggle(
    {
        Name = "Look At",
        Value = Alluka.Aimlock.LookAt,
        Callback = function(v)
            Alluka.LookAt = v
            Notify("GUTZ | Aimlock", "Look At : "..tostring(Alluka.LookAt), 3)
        end
    }
)
AimingSection:AddToggle(
    {
        Name = "Resolver",
        Value = Alluka.Aimlock.Resolver,
        Callback = function(v)
            Alluka.Aimlock.Resolver = v
            Notify("GUTZ | Aimlock", "Resolver : "..tostring(Alluka.Aimlock.Resolver), 3)
        end
    }
)
AimingSection:AddToggle(
    {
        Name = "Prediction",
        Value = Alluka.Aimlock.Prediction,
        Callback = function(v)
            Alluka.Aimlock.Prediction = v
            Notify("GUTZ | Aimlock", "Prediction : "..tostring(Alluka.Aimlock.Prediction), 3)
        end
    }
)
AimingSection:AddToggle(
    {
        Name = "Auto Prediction",
        Value = Alluka.Aimlock.AutoPrediction,
        Callback = function(v)
            Alluka.Aimlock.AutoPrediction = v
            Notify("GUTZ | Aimlock", "Auto Prediction : "..tostring(Alluka.Aimlock.AutoPrediction), 3)
        end
    }
)
AimingSection:AddSlider(
    {
        Name = "Aimbot Prediction",
        Value = Alluka.Aimlock.Pred,
        Min = 0,
        Max = 1,
        Decimals = 3,
        Format = function(v)
            return "Prediction: " .. tostring(v)
        end,
        Callback = function(v)
            Alluka.Aimlock.Pred = v
            Notify("GUTZ | Aimlock", "Prediction: " .. tostring(Alluka.Aimlock.Pred), 3)
        end
    }
)
AimingSection:AddToggle(
    {
        Name = "Knocked Check",
        Value = Alluka.Aimlock.KnockedCheck,
        Callback = function(v)
            Alluka.Aimlock.KnockedCheck = v
            Notify("GUTZ | Aimlock", "Knocked Check : "..tostring(Alluka.Aimlock.KnockedCheck), 3)
        end
    }
)
AimingSection:AddToggle(
    {
        Name = "Grabbed Check",
        Value = Alluka.Aimlock.GrabbedCheck,
        Callback = function(v)
            Alluka.Aimlock.GrabbedCheck = v
            Notify("GUTZ | Aimlock", "Grabbed Check : "..tostring(Alluka.Aimlock.GrabbedCheck), 3)
        end
    }
)


local CameraSection = AimTab:CreateSection({Name = "Camera Aimlock", Side = "Right"})
CameraSection:AddToggle(
    {
        Name = "Camlock",
        Value = Alluka.Camlock.Enabled,
        Keybind = Alluka.Camlock.Key,
        Callback = function(v)
            Alluka.Camlock.Enabled = v
            Notify("GUTZ | Camlock", "Camlock : " .. tostring(Alluka.Camlock.Enabled), 3)
        end
    }
)

CameraSection:AddToggle(
    {
        Name = "Air Shot",
        Value = Alluka.Camlock.AirShot,
        Callback = function(v)
            Alluka.Camlock.AirShot = v
            Notify("GUTZ | Camlock", "Air Shot : "..tostring(Alluka.Camlock.AirShot), 3)
        end
    }
)

CameraSection:AddDropdown(
    {
        Name = "Aim Part",
        Value = Alluka.Camlock.Part,
        List = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso"},
        Callback = function(v)
            Alluka.Camlock.Part = v
            Notify("GUTZ | Camlock", "Part : "..tostring(Alluka.Camlock.Part), 3)
        end
    }
)
CameraSection:AddDropdown(
    {
        Name = "Air Part",
        Value = Alluka.Camlock.AirPart,
        List = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso"},
        Callback = function(v)
            Alluka.Camlock.AirPart = v
            Notify("GUTZ | Camlock", "Air Part : "..tostring(Alluka.Camlock.AirPart), 3)
        end
    }
)
CameraSection:AddToggle(
    {
        Name = "Resolver",
        Value = Alluka.Camlock.Resolver,
        Callback = function(v)
            Alluka.Camlock.Resolver = v
            Notify("GUTZ | Camlock", "Resolver : " .. tostring(Alluka.Camlock.Resolver), 3)
        end
    }
)
CameraSection:AddToggle(
    {
        Name = "Smoothness",
        Value = Alluka.Camlock.Smoothness,
        Callback = function(v)
            Alluka.Camlock.Smoothness = v
            Notify("GUTZ | Camlock", "Smoothness : "..tostring(Alluka.Camlock.Smoothness), 3)
        end
    }
)
CameraSection:AddSlider(
    {
        Name = "Smoothness Amount",
        Value = Alluka.Camlock.SmoothnessAmount,
        Min = 0,
        Max = 1,
        Decimals = 2,
        Format = function(v)
            return "Smoothness: " .. tostring(v)
        end,
        Callback = function(v)
            Alluka.Camlock.SmoothnessAmount = v
            Notify("GUTZ | Camlock", "Smoothness Amount: " .. tostring(Alluka.Camlock.SmoothnessAmount), 3)
        end
    }
)
CameraSection:AddDropdown(
    {
        Name = "Easing Style",
        Value = Alluka.Camlock.EasingStyle,
        List = {"Sine", "Back", "Quad", "Cubic", "Quart", "Quint", "Linear", "Bounce", "Elastic", "Circular", "Exponential",},
        Callback = function(v)
            Alluka.Camlock.EasingStyle = v
            Notify("GUTZ | Camlock", "Easing Style : "..tostring(Alluka.Camlock.EasingStyle), 3)
        end
    }
)
CameraSection:AddDropdown(
    {
        Name = "Easing Direction",
        Value = Alluka.Camlock.EasingDirection,
        List = {"In", "Out", "InOut", "OutIn"},
        Callback = function(v)
            Alluka.Camlock.EasingDirection = v
            Notify("GUTZ | Camlock", "Easing Style : "..tostring(Alluka.Camlock.EasingDirection), 3)
        end
    }
)

CameraSection:AddToggle(
    {
        Name = "Prediction",
        Value = Alluka.Camlock.Prediction,
        Callback = function(v)
            Alluka.Camlock.Prediction = v
            Notify("GUTZ | Camlock", "Prediction : "..tostring(Alluka.Camlock.Prediction), 3)
        end
    }
)
CameraSection:AddToggle(
    {
        Name = "Auto Prediction",
        Value = Alluka.Camlock.AutoPrediction,
        Callback = function(v)
            Alluka.Camlock.AutoPrediction = v
            Notify("GUTZ | Camlock", "Auto Prediction : "..tostring(Alluka.Camlock.AutoPrediction), 3)
        end
    }
)
CameraSection:AddSlider(
    {
        Name = "Aimbot Prediction",
        Value = Alluka.Camlock.Pred,
        Min = 0,
        Max = 1,
        Decimals = 3,
        Format = function(v)
            return "Prediction: " .. tostring(v)
        end,
        Callback = function(v)
            Alluka.Camlock.Pred = v
            Notify("GUTZ | Camlock", "Prediction : " .. tostring(Alluka.Camlock.Prediction), 3)
        end
    }
)
CameraSection:AddToggle(
    {
        Name = "Knocked Check",
        Value = Alluka.Camlock.KnockedCheck,
        Callback = function(v)
            Alluka.Camlock.KnockedCheck = v
            Notify("GUTZ | Camlock", "Knocked Check : "..tostring(Alluka.Camlock.KnockedCheck), 3)
        end
    }
)
CameraSection:AddToggle(
    {
        Name = "Grabbed Check",
        Value = Alluka.Camlock.GrabbedCheck,
        Callback = function(v)
            Alluka.Camlock.GrabbedCheck = v
            Notify("GUTZ | Camlock", "Grabbed Check : "..tostring(Alluka.Camlock.GrabbedCheck), 3)
        end
    }
)

local CharTab = Gutz:CreateTab({Name = "Character"})
local CharSection = CharTab:CreateSection({Name = "Character", Side = "Left"})

CharSection:AddToggle(
    {
        Name = "Fly",
        Value = Alluka.Fly.Enabled,
        Keybind = Alluka.Fly.Key,
        Callback = function()
            Fly()
        end
    }
)
CharSection:AddToggle(
    {
        Name = "NoClip",
        Value = Alluka.NoClip.Enabled,
        Keybind = Alluka.NoClip.Key,
        Callback = function(v)
            Alluka.NoClip.Enabled = v
            if Alluka.NoClip.Enabled then
                repeat
                    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        for _, v in pairs(LocalPlayer.Character:GetDescendants()) do
                            if v:IsA("BasePart") then
                                v.CanCollide = false
                            end
                        end
                    end
                    RunService.Stepped:Wait()
                until not Alluka.NoClip.Enabled
            else
                if LocalPlayer.Character then
                    for _, v in pairs(LocalPlayer.Character:GetDescendants()) do
                        if v:IsA("BasePart") then
                            v.CanCollide = true
                        end
                    end
                end
            end
        end
    }
)
CharSection:AddSlider(
    {
        Name = "Fly Speed Multiplier",
        Value = Alluka.Fly.Speed,
        Min = 0,
        Max = 50,
        Decimals = 1,
        Format = function(v)
            return "Fly Speed : " .. tostring(v)
        end,
        Callback = function(v)
            Alluka.Fly.Speed = v
            Notify("GUTZ | Fly", "Speed : " .. tostring(Alluka.Fly.Speed), 3)
        end
    }
)
CharSection:AddToggle(
    {
        Name = "Spin Bot",
        Value = Alluka.SpinBot.Enabled,
        Callback = function(v)
            Alluka.SpinBot.Enabled = v
            if Alluka.SpinBot.Enabled then
                repeat
                    if LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(Alluka.SpinBot.Speed), 0)
                    end
                    RunService.RenderStepped:Wait()
                until not Alluka.SpinBot.Enabled
            end
            Notify("GUTZ | Spin bot", "Spin bot : " .. tostring(Alluka.SpinBot.Enabled), 3)
        end
    }
)
CharSection:AddSlider(
    {
        Name = "Spin Speed Multiplier",
        Value = Alluka.SpinBot.Speed,
        Min = 0,
        Max = 100,
        Decimals = 1,
        Format = function(v)
            return "Spin Speed : " .. tostring(v)
        end,
        Callback = function(v)
            Alluka.SpinBot.Speed = v
            Notify("GUTZ | Spin Bot", "Speed : " .. tostring(Alluka.SpinBot.Speed), 3)
        end
    }
)
CharSection:AddToggle(
    {
        Name = "Speed",
        Value = Alluka.Speed.Enabled,
        Keybind = "",
        Callback = function(v)
            Alluka.Speed.Enabled = v
            Notify("GUTZ | Speed", "Speed : " .. tostring(Alluka.Speed.Enabled), 3)
        end
    }
)
CharSection:AddKeybind(
    {
        Name = "Sprint Key",
        Value = Enum.KeyCode[Alluka.Speed.SprintKey],
        Mode = "Held",
        Pressed = function()
            repeat
                if Alluka.Speed.Enabled then
                    if game:GetService("UserInputService"):IsKeyDown("W") or game:GetService("UserInputService"):IsKeyDown("A") or game:GetService("UserInputService"):IsKeyDown("S") or game:GetService("UserInputService"):IsKeyDown("D") then
                        LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame + LocalPlayer.Character.Humanoid.MoveDirection * Alluka.Speed.Speed
                    end
                end
                game:GetService("RunService").Heartbeat:wait()
            until not game:GetService("UserInputService"):IsKeyDown(Alluka.Speed.SprintKey)
        end,
    }
)
CharSection:AddSlider(
    {
        Name = "Speed Multiplier",
        Value = Alluka.Speed.Speed,
        Min = 0,
        Max = 10,
        Decimals = 1,
        Format = function(v)
            return "Speed : " .. tostring(v)
        end,
        Callback = function(v)
            Alluka.Speed.Speed = v
            Notify("GUTZ | Speed", "Speed : " .. tostring(Alluka.Speed.Speed), 3)
        end
    }
)
CharSection:AddToggle(
    {
        Name = "Korblox",
        Value = Alluka.Korblox.Enabled,
        Callback = function(v)
            Alluka.Korblox.Enabled = v
            Notify("GUTZ | Korblox", "Korblox : "..tostring(Alluka.Korblox.Enabled), 3)
        end
    }
)
CharSection:AddToggle(
    {
        Name = "Headless",
        Value = Alluka.Headless.Enabled,
        Callback = function(v)
            Alluka.Headless.Enabled = v
            Notify("GUTZ | Headless", "Headless : "..tostring(Alluka.Headless.Enabled), 3)
            if Alluka.Headless.Enabled then
                LocalPlayer.Character.Head.Transparency = 1
                for i, v in pairs(LocalPlayer.Character.Head:GetChildren()) do 
                    if (v:IsA('Decal')) then
                        v.Transparency = 1
                    end
                end
            else
                LocalPlayer.Character.Head.Transparency = 0
                for i, v in pairs(LocalPlayer.Character.Head:GetChildren()) do 
                    if (v:IsA('Decal')) then
                        v.Transparency = 0
                    end
                end
            end
        end
    }
)
local CharSection = CharTab:CreateSection({Name = "Anti-Aim", Side = "Right"})
CharSection:AddToggle(
    {
        Name = "Anti Aim",
        Value = Alluka.AntiAim.Enabled,
        Keybind = Alluka.AntiAim.Key,
        Callback = function(v)
            Alluka.AntiAim.Enabled = v
            Notify("GUTZ | Anti-Aim", "Anti Aim : "..tostring(Alluka.AntiAim.Enabled), 3)
        end
    }
)
CharSection:AddToggle(
    {
        Name = "Desync",
        Value = Alluka.Desync.Enabled,
        Keybind = Alluka.Desync.Key,
        Callback = function(v)
            Alluka.Desync.Enabled = v
            Notify("GUTZ | Anti-Aim", "Desync : "..tostring(Alluka.Desync.Enabled), 3)
        end
    }
)
CharSection:AddDropdown(
    {
        Name = "AA Type",
        Value = Alluka.AntiAim.Type,
        List = {"Sky", "Underground", "Custom Vel"},
        Callback = function(v)
            Alluka.AntiAim.Type = v
            Notify("GUTZ | Anti-Aim", "Anti Aim Type : "..tostring(Alluka.AntiAim.Type), 3)
        end
    }
)
CharSection:AddSlider(
    {
        Name = "X Velocity",
        Value = Alluka.AntiAim.XValue,
        Min = -999,
        Max = 999,
        Format = function(v)
            return "X Velocity: " .. tostring(v)
        end,
        Callback = function(v)
            Alluka.AntiAim.XValue = v
            Notify("GUTZ | Anti-Aim", "X Velocity: " .. tostring(Alluka.AntiAim.XValue), 3)
        end
    }
)
CharSection:AddSlider(
    {
        Name = "Y Velocity",
        Value = Alluka.AntiAim.YValue,
        Min = -999,
        Max = 999,
        Format = function(v)
            return "Y Velocity: " .. tostring(v)
        end,
        Callback = function(v)
            Alluka.AntiAim.YValue = v
            Notify("GUTZ | Anti-Aim", "Y Velocity: " .. tostring(Alluka.AntiAim.YValue), 3)
        end
    }
)
CharSection:AddSlider(
    {
        Name = "Z Velocity",
        Value = Alluka.AntiAim.ZValue,
        Min = -999,
        Max = 999,
        Format = function(v)
            return "Z Velocity: " .. tostring(v)
        end,
        Callback = function(v)
            Alluka.AntiAim.ZValue = v
            Notify("GUTZ | Anti-Aim", "Z Velocity: " .. tostring(Alluka.AntiAim.ZValue), 3)
        end
    }
)


local RageSection = CharTab:CreateSection({Name = "Rage", Side = "Left"})
RageSection:AddToggle(
    {
        Name = "Strafe",
        Value = Alluka.Strafe.Enabled,
        Callback = function(v)
            Alluka.Strafe.Enabled = v
            Notify("GUTZ | Strafe", "Strafe : " .. tostring(Alluka.Strafe.Enabled), 3)
        end
    }
)
RageSection:AddToggle(
    {
        Name = "View Target",
        Value = Alluka.Strafe.View,
        Callback = function(v)
            Alluka.Strafe.View = v
            Notify("GUTZ | Strafe", "View Target : " .. tostring(Alluka.Strafe.View), 3)
        end
    }
)
RageSection:AddDropdown(
    {
        Name = "Strafe Type",
        Value = Alluka.Strafe.Type,
        List = {"Orbit", "Randomzied"},
        Callback = function(v)
            Alluka.Strafe.Type = v
            Notify("GUTZ | Strafe", "Type : "..tostring(Alluka.Strafe.Type), 3)
        end
    }
)
RageSection:AddSlider(
    {
        Name = "Strafe Speed Multiplier",
        Value = Alluka.Strafe.Speed,
        Min = 0,
        Max = 10,
        Decimals = 1,
        Format = function(v)
            return "Strafe Speed : " .. tostring(v)
        end,
        Callback = function(v)
            Alluka.Strafe.Speed = v
            Notify("GUTZ | Strafe", "Speed : " .. tostring(Alluka.Strafe.Speed), 3)
        end
    }
)
RageSection:AddSlider(
    {
        Name = "Strafe Distance Multiplier",
        Value = Alluka.Strafe.Distance,
        Min = 0,
        Max = 20,
        Decimals = 1,
        Format = function(v)
            return "Strafe Distance : " .. tostring(v)
        end,
        Callback = function(v)
            Alluka.Strafe.Distance = v
            Notify("GUTZ | Strafe", "Distance : " .. tostring(Alluka.Strafe.Distance), 3)
        end
    }
)

local TPTab = Gutz:CreateTab({Name = "Teleports"})
local TPSection = TPTab:CreateSection({Name = "Map Teleports", Side = "Left"})


TPSection:AddButton(
    {
        Name = "UFO",
        Callback = function()
            LocalPlayer.Character.HumanoidRootPart.CFrame = Alluka.Teleports.UFO
        end
    }
)
TPSection:AddButton(
    {
        Name = "Bank",
        Callback = function()
            LocalPlayer.Character.HumanoidRootPart.CFrame = Alluka.Teleports.Bank
        end
    }
)

TPSection:AddButton(
    {
        Name = "Casino",
        Callback = function()
            LocalPlayer.Character.HumanoidRootPart.CFrame = Alluka.Teleports.Casino
        end
    }
)

TPSection:AddButton(
    {
        Name = "School",
        Callback = function()
            LocalPlayer.Character.HumanoidRootPart.CFrame = Alluka.Teleports.School
        end
    }
)

TPSection:AddButton(
    {
        Name = "Up Hill",
        Callback = function()
            LocalPlayer.Character.HumanoidRootPart.CFrame = Alluka.Teleports.UpHill
        end
    }
)


TPSection:AddButton(
    {
        Name = "Down Hill",
        Callback = function()
            LocalPlayer.Character.HumanoidRootPart.CFrame = Alluka.Teleports.DownHill
        end
    }
)

TPSection:AddButton(
    {
        Name = "Strip Club",
        Callback = function()
            LocalPlayer.Character.HumanoidRootPart.CFrame = Alluka.Teleports.StripClub
        end
    }
)

TPSection:AddButton(
    {
        Name = "Shopping Plaza",
        Callback = function()
            LocalPlayer.Character.HumanoidRootPart.CFrame = Alluka.Teleports.ShoppingPlaza
        end
    }
)


local ArmorSection = TPTab:CreateSection({Name = "Armor Teleports", Side = "Right"})
ArmorSection:AddButton(
    {
        Name = "Medium Armor [ $1061 ]",
        Callback = function()
            if LocalPlayer and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                if LocalPlayer.Character.BodyEffects.Armor.Value <= 100 and workspace.Ignored.Shop["[Medium Armor] - $1061"] and not LocalPlayer.Character.BodyEffects["K.O"].Value then
                    
                    if not OldPos then
                        OldPos = LocalPlayer.Character.HumanoidRootPart.CFrame
                    end
                    
                    repeat
                        if workspace.Ignored.Shop["[Medium Armor] - $1061"] and workspace.Ignored.Shop["[Medium Armor] - $1061"]:FindFirstChild("ClickDetector") then
                            LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.Ignored.Shop["[Medium Armor] - $1061"].Head.CFrame
                            wait(Alluka.AutoArmor.Delay)
                            fireclickdetector(workspace.Ignored.Shop["[Medium Armor] - $1061"].ClickDetector)
                        end
                        RunService.RenderStepped:Wait()
                    until LocalPlayer.Character.BodyEffects.Armor.Value >= 0 or LocalPlayer.Character.BodyEffects["K.O"].Value

                    if OldPos then
                        LocalPlayer.Character.HumanoidRootPart.CFrame = OldPos
                        OldPos = nil
                    end

                end
            end
        end
    }
)
ArmorSection:AddButton(
    {
        Name = "High-Medium Armor [ $2440 ]",
        Callback = function()
            if LocalPlayer and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                if LocalPlayer.Character.BodyEffects.Armor.Value <= 130 and workspace.Ignored.Shop["[High-Medium Armor] - $2440"] and not LocalPlayer.Character.BodyEffects["K.O"].Value then
                    
                    if not OldPos then
                        OldPos = LocalPlayer.Character.HumanoidRootPart.CFrame
                    end
                    
                    repeat
                        if workspace.Ignored.Shop["[High-Medium Armor] - $2440"] and workspace.Ignored.Shop["[High-Medium Armor] - $2440"]:FindFirstChild("ClickDetector") then
                            LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.Ignored.Shop["[High-Medium Armor] - $2440"].Head.CFrame
                            wait(Alluka.AutoArmor.Delay)
                            fireclickdetector(workspace.Ignored.Shop["[High-Medium Armor] - $2440"].ClickDetector)
                        end
                        RunService.RenderStepped:Wait()
                    until LocalPlayer.Character.BodyEffects.Armor.Value >= 130 or LocalPlayer.Character.BodyEffects["K.O"].Value

                    if OldPos then
                        LocalPlayer.Character.HumanoidRootPart.CFrame = OldPos
                        OldPos = nil
                    end

                end
            end
        end
    }
)
ArmorSection:AddToggle(
    {
        Name = "Auto Armor",
        Value = Alluka.AutoArmor.Enabled,
        Callback = function(v)
            Alluka.AutoArmor.Enabled = v
            Notify("GUTZ | Auto Buy", "Auto Armor : " .. tostring(Alluka.AutoArmor.Enabled), 3)
        end
    }
)
ArmorSection:AddToggle(
    {
        Name = "Teleport",
        Value = Alluka.AutoArmor.TP,
        Callback = function(v)
            Alluka.AutoArmor.TP = v
            Notify("GUTZ | Auto Buy", "Teleport: " .. tostring(Alluka.AutoArmor.TP), 3)
        end
    }
)
ArmorSection:AddSlider(
    {
        Name = "Buy Delay",
        Value = Alluka.AutoArmor.Delay,
        Min = 0,
        Max = 1,
        Decimals = 1,
        Format = function(v)
            return "Delay: " .. tostring(v)
        end,
        Callback = function(v)
            AAlluka.AutoArmor.Delay = v
            Notify("GUTZ | Auro Armor", "Delay: " .. tostring(Alluka.AutoArmor.Delay), 3)
        end
    }
)
ArmorSection:AddDropdown(
    {
        Name = "Armor To Buy",
        Value = Alluka.AutoArmor.ArmorToBuy,
        List = {"[Medium Armor] - $1061", "[High-Medium Armor] - $2440"},
        Callback = function(v)
            Alluka.AutoArmor.ArmorToBuy = v
            Notify("GUTZ | Auto Buy", "Armor : "..tostring(Alluka.AutoArmor.ArmorToBuy), 3)
        end
    }
)

--[[local ArmorSection = TPTab:CreateSection({Name = "Food Teleports", Side = "Right"})
ArmorSection:AddDropdown(
    {
        Name = "Food To Buy",
        Value = Alluka.AutoHeal.FoodToBuy,
        List = {"[Chicken] - $7", "[Popcorn] - $7", "[Donut] - $5", "[HotDog] - $8", "[Pizza] - $5", "[Taco] - $2"},
        Callback = function(v)
            Alluka.AutoHeal.FoodToBuy = v
            Notify("GUTZ | Auto Buy", "Food : "..tostring(Alluka.AutoHeal.FoodToBuy), 3)
        end
    }
)]]
